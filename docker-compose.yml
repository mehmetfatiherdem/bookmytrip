version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - dev

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - dev

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - dev

  mongodb:
    image: mongo:5.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27018:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - dev

  # Redis for services that require it
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - dev

  # PostgreSQL for bookmytrip
  bookmytrip-db:
    image: postgres:13
    container_name: bookmytrip-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_BOOKMYTRIP_DB}
    ports:
      - "5433:5432"  # Expose PostgreSQL port for bookmytrip DB
    volumes:
      - bookmytrip-db-data:/var/lib/postgresql/data
    networks:
      - dev

  # PostgreSQL for bookmytrip_user
  bookmytrip-user-db:
    image: postgres:13
    container_name: bookmytrip-user-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_BOOKMYTRIP_USER_DB}
    ports:
      - "5434:5432"  # Expose PostgreSQL port for bookmytrip-user DB
    volumes:
      - bookmytrip-user-db-data:/var/lib/postgresql/data
    networks:
      - dev

  # services
  bookmytrip-exception-service:
    build: ./bookmytrip-exception-service
    ports:
      - "8097:8097"
    depends_on:
      - mongodb
    networks:
      - dev

  bookmytrip-gw:
    build: ./bookmytrip-gw
    ports:
      - "9090:9090"
    depends_on:
      - kafka
      - redis
      - bookmytrip-service-discovery
    networks:
      - dev

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - bookmytrip-gw
    networks:
      - dev

  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: swagger-ui
    ports:
      - "8080:8080"
    environment:
      - API_URL=http://localhost/v3/api-docs
    networks:
      - dev


  bookmytrip-notification-service:
    build: ./bookmytrip-notification-service
    ports:
      - "8098:8098"
    depends_on:
      - rabbitmq
    networks:
      - dev

  bookmytrip-service:
    build: ./bookmytrip-service
    ports:
      - "8088:8088"
    depends_on:
      - bookmytrip-db
      - redis
      - kafka
      - bookmytrip-service-discovery
    networks:
      - dev

  bookmytrip-service-discovery:
    build: ./bookmytrip-service-discovery
    container_name: bookmytrip-service-discovery
    ports:
      - "8761:8761"
    networks:
      - dev

  bookmytrip-user-service:
    build: ./bookmytrip-user-service
    ports:
      - "8089:8089"
    depends_on:
      - bookmytrip-user-db
      - redis
      - kafka
      - rabbitmq
      - bookmytrip-service-discovery
    networks:
      - dev

volumes:
  mongo-data:
  bookmytrip-db-data:
  bookmytrip-user-db-data:

networks:
  dev:
    driver: bridge
